{"paragraphs":[{"text":"%md\n## Imports","dateUpdated":"2019-01-24T12:38:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Imports</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333523827_-1503754200","id":"20190117-101110_855102552","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4564"},{"text":"import scala.util.Try\nimport scala.collection.JavaConverters._\n\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\nimport com.amazonaws.services.s3.model.CannedAccessControlList\n\nimport java.io.{BufferedReader, InputStreamReader}\nimport java.util.zip.ZipInputStream\n\nimport org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\nimport org.joda.time.Days\nimport org.joda.time.format.DateTimeFormat","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.util.Try\nimport scala.collection.JavaConverters._\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.auth.BasicAWSCredentials\nimport com.amazonaws.services.s3.model.CannedAccessControlList\nimport java.io.{BufferedReader, InputStreamReader}\nimport java.util.zip.ZipInputStream\nimport org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\nimport org.joda.time.Days\nimport org.joda.time.format.DateTimeFormat\n"}]},"apps":[],"jobName":"paragraph_1548333523864_-1421033187","id":"20190117-101223_2061589521","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4565"},{"text":"%md\n## Utils functions","dateUpdated":"2019-01-24T12:38:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Utils functions</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333523877_-1438346887","id":"20190117-101404_1880515784","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4566"},{"text":"def str(row: Array[String], i: Int): String = Try(row(i)).getOrElse(\"\")\ndef int(row: Array[String], i: Int): Int = Try(row(i).toInt).getOrElse(0)\ndef double(row: Array[String], i: Int): Float = Try(row(i).toFloat).getOrElse(0.0F)\ndef bigInt(row: Array[String], i: Int): BigInt= Try(BigInt(row(i))).getOrElse(BigInt(0))\ndef getLanguage(s :String): String = {\n\n    if (s != \"\")\n        s.split(\";\")(0).split(\":\")(1)\n    else\n        \"eng\"\n        \n    }    ","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"str: (row: Array[String], i: Int)String\nint: (row: Array[String], i: Int)Int\ndouble: (row: Array[String], i: Int)Float\nbigInt: (row: Array[String], i: Int)BigInt\ngetLanguage: (s: String)String\n"}]},"apps":[],"jobName":"paragraph_1548333523879_-1437577389","id":"20190117-101343_1037678636","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4567"},{"text":"case class Event(GLOBALEVENTID: Int,\n                  SQLDATE: Int,\n                  MonthYear: Int,\n                  Year: Int,\n                  FractionDate: Double,\n                  Actor1Code: String,\n                  Actor1Name: String,\n                  Actor1CountryCode: String,\n                  Actor1KnownGroupCode: String,\n                  Actor1EthnicCode: String,\n                  Actor1Religion1Code: String,\n                  Actor1Religion2Code: String,\n                  Actor1Type1Code: String,\n                  Actor1Type2Code: String,\n                  Actor1Type3Code: String,\n                  Actor2Code: String,\n                  Actor2Name: String,\n                  Actor2CountryCode: String,\n                  Actor2KnownGroupCode: String,\n                  Actor2EthnicCode: String,\n                  Actor2Religion1Code: String,\n                  Actor2Religion2Code: String,\n                  Actor2Type1Code: String,\n                  Actor2Type2Code: String,\n                  Actor2Type3Code: String,\n                  IsRootEvent: Int,\n                  EventCode: String,\n                  EventBaseCode: String,\n                  EventRootCode: String,\n                  QuadClass: Int,\n                  GoldsteinScale: Double,\n                  NumMentions: Int,\n                  NumSources: Int,\n                  NumArticles: Int,\n                  AvgTone: Double,\n                  Actor1Geo_Type: Int,\n                  Actor1Geo_FullName: String,\n                  Actor1Geo_CountryCode: String,\n                  Actor1Geo_ADM1Code: String,\n                  Actor1Geo_ADM2Code: String,\n                  Actor1Geo_Lat: Double,\n                  Actor1Geo_Long: Double,\n                  Actor1Geo_FeatureID: String,\n                  Actor2Geo_Type: Int,\n                  Actor2Geo_FullName: String,\n                  Actor2Geo_CountryCode: String,\n                  Actor2Geo_ADM1Code: String,\n                  Actor2Geo_ADM2Code: String,\n                  Actor2Geo_Lat: Double,\n                  Actor2Geo_Long: Double,\n                  Actor2Geo_FeatureID: String,\n                  ActionGeo_Type: Int,\n                  ActionGeo_FullName: String,\n                  ActionGeo_CountryCode: String,\n                  ActionGeo_ADM1Code: String,\n                  ActionGeo_ADM2Code: String,\n                  ActionGeo_Lat: Double,\n                  ActionGeo_Long: Double,\n                  ActionGeo_FeatureID: String,\n                  DATEADDED: BigInt,\n                  SOURCEURL: String) ","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Event\n"}]},"apps":[],"jobName":"paragraph_1548333523880_-1439501134","id":"20190117-101350_472962114","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4568"},{"text":"def eventFromStr(row: Array[String]): Event = {\n    Event(\n      int(row, 0), int(row, 1), int(row, 2), int(row, 3), double(row, 4), str(row, 5), str(row, 6), str(row, 7), str(row, 8), str(row, 9), str(row, 10), str(row, 11), str(row, 12), str(row, 13), str(row, 14), str(row, 15), str(row, 16), str(row, 17), str(row, 18), str(row, 19), str(row, 20),\n      str(row, 21), str(row, 22), str(row, 23), str(row, 24), int(row, 25), str(row, 26), str(row, 27), str(row, 28), int(row, 29), double(row, 30), int(row, 31), int(row, 32), int(row, 33), double(row, 34), int(row, 35), str(row, 36), str(row, 37), str(row, 38), str(row, 39), double(row, 40),\n      double(row, 41), str(row, 42), int(row, 43), str(row, 44), str(row, 45), str(row, 46), str(row, 47), double(row, 48), double(row, 49), str(row, 50), int(row, 51), str(row, 52), str(row, 53), str(row, 54), str(row, 55), double(row, 56), double(row, 57), str(row, 58), bigInt(row, 59), str(row, 60)\n    )\n    }","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eventFromStr: (row: Array[String])Event\n"}]},"apps":[],"jobName":"paragraph_1548333523888_-1430267160","id":"20190117-101818_1648781464","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4569"},{"text":"case class EventMention(\n                         GLOBALEVENTID: Int,\n                         EventTimeDate: String,\n                         MentionTimeDate: String,\n                         MentionType: Int,\n                         MentionSourceName: String,\n                         MentionIdentifier: String,\n                         SentenceID: Int,\n                         Actor1CharOffset: Int,\n                         Actor2CharOffset: Int,\n                         ActionCharOffset: Int,\n                         InRawText: Int,\n                    \t Confidence: Int,\n                         MentionDocLen: Int,\n                         MentionDocTone: Float,\n                         MentionDocTranslationInfo: String,\n                         Extras: String\n                       )","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class EventMention\n"}]},"apps":[],"jobName":"paragraph_1548333523899_-1432960402","id":"20190117-110338_1431613434","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4570"},{"text":"def eventMentionFromStr(row: Array[String]): EventMention = {\n    EventMention(int(row,0), str(row,1), str(row,2), int(row,3), str(row,4), str(row,5), int(row,6), int(row,7), int(row,8), int(row,9), int(row,10), int(row,11),  int(row,12), double(row,13), getLanguage(str(row,14)), str(row,15))\n}","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eventMentionFromStr: (row: Array[String])EventMention\n"}]},"apps":[],"jobName":"paragraph_1548333523907_-1448350359","id":"20190117-110409_352387656","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4571"},{"text":"def readFile(path: String, minPartitions: Int = sc.defaultMinPartitions): RDD[String] = {\n      if (path.toLowerCase.contains(\"zip\")) {\n        sc.binaryFiles(path, minPartitions)\n          .flatMap {\n            case (_, zipContent) ⇒\n              val zipInputStream = new ZipInputStream(zipContent.open())\n              Stream.continually(zipInputStream.getNextEntry)\n                .takeWhile(_ != null)\n                .flatMap { _ =>\n                  val br = new BufferedReader(new InputStreamReader(zipInputStream))\n                  Stream.continually(br.readLine()).takeWhile(_ != null)\n                } #::: {\n                zipInputStream.close()\n                Stream.empty[String]\n              }\n          }\n      } else {\n        sc.textFile(path, minPartitions)\n      }\n    }","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"readFile: (path: String, minPartitions: Int)org.apache.spark.rdd.RDD[String]\n"}]},"apps":[],"jobName":"paragraph_1548333523912_-1451813099","id":"20190117-101639_1884581412","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4572"},{"text":"%md\n## load test file from s3","dateUpdated":"2019-01-24T12:38:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>load test file from s3</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333523922_-1441809627","id":"20190117-101703_957369190","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4573"},{"text":"val AWS_ID = \"X\"\nval AWS_KEY = \"X\"\nval BUCKET = \"gdelt-raw\"\nval awsClient = new AmazonS3Client(new BasicAWSCredentials(AWS_ID, AWS_KEY))\n\nimport spark.implicits._\nsc.hadoopConfiguration.set(\"fs.s3a.access.key\", AWS_ID) // mettre votre ID du fichier credentials.csv\nsc.hadoopConfiguration.set(\"fs.s3a.secret.key\", AWS_KEY) // mettre votre secret du fichier credentials.\nsc.hadoopConfiguration.set(\"fs.s3a.connection.maximum\",\"1000\") //(3) 15 par default !!!\n\nval outputFolder = \"neo4j\"\nval outputPrefix = s\"s3a://$BUCKET/$outputFolder\"\n\nval START_ID = \":START_ID\"\nval END_ID = \":END_ID\"\nval LABEL = \":LABEL\"\nval TYPE = \":TYPE\"\n\nval sourceDate = \"2018\"\nval delimiter = \"\\t\"","dateUpdated":"2019-01-24T12:39:14+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1548333523932_-1447196112","id":"20190117-103533_707670223","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4574"},{"text":"%md\n## Nodes\n### Event","dateUpdated":"2019-01-24T12:38:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Nodes</h2>\n<h3>Event</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333523942_-1461816570","id":"20190117-141843_1816826275","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4575"},{"text":"val entityName = \"Event\"\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\nval sparkDstFolder = s\"$outputPrefix/nodes/$entityName\"\nval dstFolder = s\"$outputFolder/nodes/$entityName\"\nval outputUrl = s\"$outputFolder/nodes/$entityName/$entityName.csv.gz\"\n\nreadFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF().  // get interesting columns\n  select($\"GlobalEventId\".as(s\"Id:ID($entityName)\"), $\"AvgTone\".as(\"AvgTone:DOUBLE\"), $\"NumArticles\".as(\"NumArticles\"), $\"GoldsteinScale\".as(\"GoldsteinScale\"),  lit(entityName).as(LABEL)).  // write to s3\n  distinct.coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"entityName: String = Event\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/nodes/Event\ndstFolder: String = neo4j/nodes/Event\noutputUrl: String = neo4j/nodes/Event/Event.csv.gz\npartFile: String = neo4j/nodes/Event/part-00000-1833d77e-ee41-4b9a-a3b7-50701c3d4415-c000.csv.gz\nres29: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@13f7e8cf\n"}]},"apps":[],"jobName":"paragraph_1548333523949_-1466048808","id":"20190117-104549_1215095882","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4576"},{"text":"%md\n### Actor","dateUpdated":"2019-01-24T12:38:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Actor</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333523960_-1457969081","id":"20190121-222044_1814468447","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4577"},{"text":"val entityName = \"Actor\"\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\nval sparkDstFolder = s\"$outputPrefix/nodes/$entityName\"\nval dstFolder = s\"$outputFolder/nodes/$entityName\"\nval outputUrl = s\"$outputFolder/nodes/$entityName/$entityName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF().cache \n  \n  // get interesting columns\nval df1 = df.filter(\"Actor1Code != ''\").select($\"Actor1Code\".as(s\"Id:ID($entityName)\"), $\"Actor1Name\".as(\"Name\"), lit(entityName).as(LABEL))  // write to s3\nval df2 = df.filter(\"Actor2Code != ''\").select($\"Actor2Code\".as(s\"Id:ID($entityName)\"), $\"Actor2Name\".as(\"Name\"), lit(entityName).as(LABEL))  // write to s3\ndf1.union(df2).distinct.coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"entityName: String = Actor\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/nodes/Actor\ndstFolder: String = neo4j/nodes/Actor\noutputUrl: String = neo4j/nodes/Actor/Actor.csv.gz\ndf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\ndf1: org.apache.spark.sql.DataFrame = [Id:ID(Actor): string, Name: string ... 1 more field]\ndf2: org.apache.spark.sql.DataFrame = [Id:ID(Actor): string, Name: string ... 1 more field]\npartFile: String = neo4j/nodes/Actor/part-00000-c7b75b7e-b9f6-419c-806d-f4c18a70f160-c000.csv.gz\nres34: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@75a8d3cc\n"}]},"apps":[],"jobName":"paragraph_1548333523968_-1768846192","id":"20190117-104904_1555774551","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4578"},{"text":"%md\n### Country","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Country</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333523994_-1764998703","id":"20190117-114814_314380240","dateCreated":"2019-01-24T12:38:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4579"},{"text":"val entityName = \"Country\"\nval EVENT_SAMPLE_FILES = \"cameoCountry.txt\"\nval inputUrl = s\"s3a://$BUCKET/$EVENT_SAMPLE_FILES\"\nval sparkDstFolder = s\"$outputPrefix/nodes/$entityName\"\nval dstFolder = s\"$outputFolder/nodes/$entityName\"\nval outputUrl = s\"$outputFolder/nodes/$entityName/$entityName.csv.gz\"\n\nval df = spark.read.option(\"delimiter\", delimiter).option(\"header\", \"true\").csv(inputUrl)\ndf.select($\"CODE\".as(s\"Id:ID($entityName)\"), substring($\"CODE\", 0, 2).as(\"ShortId\"), $\"LABEL\".as(\"Name\"),lit(entityName).as(LABEL)).\n  distinct().coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"entityName: String = Country\nEVENT_SAMPLE_FILES: String = cameoCountry.txt\ninputUrl: String = s3a://gdelt-raw/cameoCountry.txt\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/nodes/Country\ndstFolder: String = neo4j/nodes/Country\noutputUrl: String = neo4j/nodes/Country/Country.csv.gz\ndf: org.apache.spark.sql.DataFrame = [CODE: string, LABEL: string]\npartFile: String = neo4j/nodes/Country/part-00000-cd0ac0a7-ae53-4161-95b6-12484347d603-c000.csv.gz\nres38: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@18f248c5\n"}]},"apps":[],"jobName":"paragraph_1548333524001_-1781542906","id":"20190117-183721_586432181","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4580"},{"text":"%md\n### Document","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Document</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524005_-1783081902","id":"20190117-184759_845087120","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4581"},{"text":"val entityName = \"Document\"\nval filesPattern = s\"2018/$sourceDate*0.translation.mentions.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\nval sparkDstFolder = s\"$outputPrefix/nodes/$entityName\"\nval dstFolder = s\"$outputFolder/nodes/$entityName\"\nval outputUrl = s\"$outputFolder/nodes/$entityName/$entityName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventMentionFromStr(l.split(delimiter))).toDF()\n  \n  // get interesting columns\ndf.select(md5($\"MentionIdentifier\").as(s\"Id:ID($entityName)\"), $\"MentionIdentifier\".as(\"Url\"), $\"MentionDocTone\".cast(DoubleType).as(\"Tone:DOUBLE\"), $\"MentionDocTranslationInfo\".as(\"language\"), lit(entityName).as(LABEL)).distinct.coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"entityName: String = Document\nfilesPattern: String = 2018/2018*0.translation.mentions.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*0.translation.mentions.CSV.zip\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/nodes/Document\ndstFolder: String = neo4j/nodes/Document\noutputUrl: String = neo4j/nodes/Document/Document.csv.gz\ndf: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, EventTimeDate: string ... 14 more fields]\npartFile: String = neo4j/nodes/Document/part-00000-2439ec38-0548-45ca-bc43-0fc673351b5a-c000.csv.gz\nres43: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@3229c404\n"}]},"apps":[],"jobName":"paragraph_1548333524011_-1783851399","id":"20190117-185602_383226607","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4582"},{"text":"%md\n### Day","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Day</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524022_-1775771672","id":"20190117-210002_29099419","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4583"},{"text":"val entityName = \"Day\"\nval sparkDstFolder = s\"$outputPrefix/nodes/$entityName\"\nval dstFolder = s\"$outputFolder/nodes/$entityName\"\nval outputUrl = s\"$outputFolder/nodes/$entityName/$entityName.csv.gz\"\n\nval formatter = DateTimeFormat.forPattern(\"yyyyMMdd\");\nval from = formatter.parseDateTime(\"20180101\");\nval until = formatter.parseDateTime(\"20181231\");\nval numberOfDays = Days.daysBetween(from, until).getDays()\n\nval rows = (0 to numberOfDays).toList.map((from.plusDays)).map(formatter.print)\n\nsc.parallelize(rows).toDF(\"date\").select($\"date\".as(s\"Id:ID($entityName)\"), lit(entityName).as(LABEL)).coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"entityName: String = Day\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/nodes/Day\ndstFolder: String = neo4j/nodes/Day\noutputUrl: String = neo4j/nodes/Day/Day.csv.gz\nformatter: org.joda.time.format.DateTimeFormatter = org.joda.time.format.DateTimeFormatter@2efed4ea\nfrom: org.joda.time.DateTime = 2018-01-01T00:00:00.000Z\nuntil: org.joda.time.DateTime = 2018-12-31T00:00:00.000Z\nnumberOfDays: Int = 364\nrows: List[String] = List(20180101, 20180102, 20180103, 20180104, 20180105, 20180106, 20180107, 20180108, 20180109, 20180110, 20180111, 20180112, 20180113, 20180114, 20180115, 20180116, 20180117, 20180118, 20180119, 20180120, 20180121, 20180122, 20180123, 20180124, 20180125, 20180126, 20180127, 20180128, 20180129, 20180130, 20180131, 20180201, 20180202, 20180203, 20180204, 20180205, 20180206, 20180207, 20180208, 20180209, 20180210, 20180211, 20180212, 20180213, 20180214, 20180215, 20180216, 20180217, 20180218, 20180219, 20180220, 20180221, 20180222, 20180223, 20180224, 20180225, 20180226, 20180227, 20180228, 20180301, 20180302, 20180303, 20180304, 20180305, 20180306, 20180307, 20180308, 20180309, 20180310, 20180311, 20180312, 20180313, 20180314, 20180315, 20180316, 20180317, 20180318, 2...partFile: String = neo4j/nodes/Day/part-00000-9f417745-8da4-4496-a76b-d967eb8d8fa9-c000.csv.gz\nres47: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@42c70098\n"}]},"apps":[],"jobName":"paragraph_1548333524037_-1795393866","id":"20190117-210017_1021349629","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4584"},{"text":"%md\n## Relations","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Relations</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524044_-1798087109","id":"20190117-212149_1743415879","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4585"},{"text":"%md\n### Mention","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Mention</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524049_-1787698888","id":"20190117-211054_664687870","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4586"},{"text":"val relationName = \"MENTION\"\nval filesPattern = s\"2018/$sourceDate*.mentions.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationName\"\nval dstFolder = s\"$outputFolder/relations/$relationName\"\nval outputUrl = s\"$outputFolder/relations/$relationName/$relationName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventMentionFromStr(l.split(delimiter))).toDF()\n  \n// get interesting columns\ndf.select(md5($\"MentionIdentifier\").as(s\"$START_ID(Document)\"), $\"GlobalEventId\".as(s\"$END_ID(Event)\"), lit(relationName).as(TYPE)).\n  coalesce(1).distinct.\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = MENTION\nfilesPattern: String = 2018/2018*.mentions.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.mentions.CSV.zip\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/MENTION\ndstFolder: String = neo4j/relations/MENTION\noutputUrl: String = neo4j/relations/MENTION/MENTION.csv.gz\ndf: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, EventTimeDate: string ... 14 more fields]\npartFile: String = neo4j/relations/MENTION/part-00000-2f9ce65f-8232-4ca2-b395-f93f94ea7be0-c000.csv.gz\nres52: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@18854c8\n"}]},"apps":[],"jobName":"paragraph_1548333524055_-1788468386","id":"20190117-183841_1316724446","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4587"},{"text":"%md\n### SOURCE & TARGET","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>SOURCE &amp; TARGET</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524068_-1807321082","id":"20190117-212629_744453366","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4588"},{"text":"val relationName =\"SOURCE\"\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationName\"\nval dstFolder = s\"$outputFolder/relations/$relationName\"\nval outputUrl = s\"$outputFolder/relations/$relationName/$relationName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF().cache \n  \n  // get interesting columns\nval df1 = df.select($\"Actor1Code\".as(s\"$START_ID(Actor)\"), $\"GlobalEventId\".as(s\"$END_ID(Event)\"), lit(relationName).as(TYPE))  // write to s3\n//val df2 = df.select($\"GlobalEventId\".as(\"Event\"), $\"Actor2Code\".as(\"Actor\"))  // write to s3\n//.df1.union(df2)\ndf1.distinct.coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = SOURCE\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/SOURCE\ndstFolder: String = neo4j/relations/SOURCE\noutputUrl: String = neo4j/relations/SOURCE/SOURCE.csv.gz\ndf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\ndf1: org.apache.spark.sql.DataFrame = [:START_ID(Actor): string, :END_ID(Event): int ... 1 more field]\npartFile: String = neo4j/relations/SOURCE/part-00000-5abc5f43-2d40-4892-8894-d257d4d45072-c000.csv.gz\nres59: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@5d2be0c8\n"}]},"apps":[],"jobName":"paragraph_1548333524071_-1806936333","id":"20190117-184241_17615326","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4589"},{"text":"val relationName = \"TARGET\"\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationName\"\nval dstFolder = s\"$outputFolder/relations/$relationName\"\nval outputUrl = s\"$outputFolder/relations/$relationName/$relationName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF() \n\n//val df1 = df.select($\"Actor1Code\".as(\"Actor\"), $\"GlobalEventId\".as(\"Event\"))  // write to s3\nval df2 = df.select( $\"GlobalEventId\".as(s\"$START_ID(Event)\"), $\"Actor2Code\".as(s\"$END_ID(Actor)\"), lit(relationName).as(TYPE))  // write to s3\n//df1.union(df2)\n\ndf2.distinct.coalesce(1).write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = TARGET\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/TARGET\ndstFolder: String = neo4j/relations/TARGET\noutputUrl: String = neo4j/relations/TARGET/TARGET.csv.gz\ndf: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\ndf2: org.apache.spark.sql.DataFrame = [:START_ID(Event): int, :END_ID(Actor): string ... 1 more field]\npartFile: String = neo4j/relations/TARGET/part-00000-237d7754-5c32-47d1-8e98-1e9c08d80445-c000.csv.gz\nres18: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@44f8c7c9\n"}]},"apps":[],"jobName":"paragraph_1548333524074_-1808090580","id":"20190117-212907_1462142953","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4590"},{"text":"%md\n### IN_AC","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>IN_AC</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524077_-1810783822","id":"20190117-213146_1713781720","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4591"},{"text":"val relationName = \"IN\"\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\n\nval relationFileName = s\"${relationName}_AC\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationFileName\"\nval dstFolder = s\"$outputFolder/relations/$relationFileName\"\nval outputUrl = s\"$outputFolder/relations/$relationFileName/$relationFileName.csv.gz\"\n\n\nval df = readFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF().cache \n  \n  // get interesting columns\nval df1 = df.filter(\"Actor1Code != ''\").select($\"Actor1Code\".as(s\"$START_ID(Actor)\"), $\"Actor1CountryCode\".as(s\"$END_ID(Country)\"), lit(relationName).as(TYPE)) // write to s3\nval df2 = df.filter(\"Actor2Code != ''\").select($\"Actor2Code\".as(s\"$START_ID(Actor)\"), $\"Actor2CountryCode\".as(s\"$END_ID(Country)\"), lit(relationName).as(TYPE)) // write to s3\ndf1.union(df2).distinct.coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = IN\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nrelationFileName: String = IN_AC\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/IN_AC\ndstFolder: String = neo4j/relations/IN_AC\noutputUrl: String = neo4j/relations/IN_AC/IN_AC.csv.gz\ndf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\ndf1: org.apache.spark.sql.DataFrame = [:START_ID(Actor): string, :END_ID(Country): string ... 1 more field]\ndf2: org.apache.spark.sql.DataFrame = [:START_ID(Actor): string, :END_ID(Country): string ... 1 more field]\npartFile: String = neo4j/relations/IN_AC/part-00000-cfdb6b0a-be2f-4815-abc5-dbc96cd6bb13-c000.csv.gz\nres67: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@583bdb46\n"}]},"apps":[],"jobName":"paragraph_1548333524082_-1798856606","id":"20190117-184409_97767143","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4592"},{"text":"%md\n### ON_DD","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>ON_DD</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524085_-1801549849","id":"20190118-121039_1630112742","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4593"},{"text":"val relationName = \"ON\"\nval filesPattern = s\"2018/$sourceDate*.mentions.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\n\nval relationFileName = s\"${relationName}_DD\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationFileName\"\nval dstFolder = s\"$outputFolder/relations/$relationFileName\"\nval outputUrl = s\"$outputFolder/relations/$relationFileName/$relationFileName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventMentionFromStr(l.split(delimiter))).toDF()\n  \n  // get interesting columns\ndf.select( md5($\"MentionIdentifier\").as(s\"$START_ID(Document)\"), substring($\"MentionTimeDate\",0,8).as(s\"$END_ID(Day)\"),lit(relationName).as(TYPE)). // #TODO\ndistinct.coalesce(1).write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = ON\nfilesPattern: String = 2018/2018*.mentions.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.mentions.CSV.zip\nrelationFileName: String = ON_DD\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/ON_DD\ndstFolder: String = neo4j/relations/ON_DD\noutputUrl: String = neo4j/relations/ON_DD/ON_DD.csv.gz\ndf: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, EventTimeDate: string ... 14 more fields]\npartFile: String = neo4j/relations/ON_DD/part-00000-41bffdb0-3cf7-4258-83c2-acc2d0fc9b7d-c000.csv.gz\nres72: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@31a1a2db\n"}]},"apps":[],"jobName":"paragraph_1548333524090_-1801934598","id":"20190118-113806_605741207","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4594"},{"text":"%md\n### ON_ED","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>ON_ED</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524093_-1804627840","id":"20190118-150149_486731933","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4595"},{"text":"val relationName = \"ON\"\n\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\n\nval relationFileName = s\"${relationName}_ED\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationFileName\"\nval dstFolder = s\"$outputFolder/relations/$relationFileName\"\nval outputUrl = s\"$outputFolder/relations/$relationFileName/$relationFileName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF().cache \n  \n  // get interesting columns\ndf.select($\"GlobalEventId\".as(s\"$START_ID(Event)\"), $\"SQLDATE\".as(s\"$END_ID(Day)\"), lit(relationName).as(TYPE)).distinct.coalesce(1).\n  write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = ON\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nrelationFileName: String = ON_ED\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/ON_ED\ndstFolder: String = neo4j/relations/ON_ED\noutputUrl: String = neo4j/relations/ON_ED/ON_ED.csv.gz\ndf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\npartFile: String = neo4j/relations/ON_ED/part-00000-3825f54f-b939-4021-8c03-279d17a4f542-c000.csv.gz\nres77: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@25e89792\n"}]},"apps":[],"jobName":"paragraph_1548333524096_-1719598333","id":"20190118-120850_1450274770","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4596"},{"text":"%md\n### IN_EC","dateUpdated":"2019-01-24T12:38:44+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>IN_EC</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1548333524100_-1721137329","id":"20190118-144154_432445068","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4597"},{"text":"val countries_df = spark.read.csv(\"s3a://gdelt-raw/countries_nodes.csv\")\nval countries = countries_df.select(\"_c0\", \"_c1\").collect().map(r => (r.getString(0), r.getString(1))).toSet\n\nval countries_codes_df = countries_df.select($\"_c0\".as(\"iso_code\"), $\"_c1\".as(\"Country\")).cache","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"countries_df: org.apache.spark.sql.DataFrame = [_c0: string, _c1: string ... 2 more fields]\ncountries: scala.collection.immutable.Set[(String, String)] = Set((MY,MYS), (BM,MMR), (EN,EST), (MR,MRT), (LG,LVA), (SW,SWE), (UG,UGA), (CG,COD), (AJ,AZE), (VM,VNM), (FP,PYF), (MN,MCO), (CT,CAF), (CU,CUB), (AV,AIA), (EI,IRL), (PP,PNG), (QA,QAT), (SN,SGP), (EZ,CZE), (BL,BOL), (BC,BWA), (AQ,ASM), (FJ,FJI), (TD,TTO), (IO,IOT), (MF,MYT), (BE,BEL), (EC,ECU), (SL,SLE), (PU,GNB), (BV,BVT), (SH,SHN), (GR,GRC), (NH,VUT), (CA,CAN), (BP,SLB), (TP,STP), (HM,HMD), (MK,MKD), (BF,BHS), (UZ,UZB), (NS,SUR), (BR,BRA), (VI,VGB), (FO,FRO), (GB,GAB), (GH,GHA), (LE,LBN), (MP,MUS), (AE,ARE), (WA,NAM), (CS,CRI), (CK,CCK), (AO,AGO), (NI,NGA), (LI,LBR), (FG,GUF), (ER,ERI), (DO,DMA), (GY,GUY), (TI,TJK), (KG,KGZ), (AS,AUS), (MD,MDA), (RI,SRB), (RN,MAF), (MG,MNG), (EK,GNQ), (GT,GTM), (KR,KIR), (PL,POL), (HO,HND), (...countries_codes_df: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [iso_code: string, Country: string]\n"}]},"apps":[],"jobName":"paragraph_1548333524103_-1720752580","id":"20190118-150650_484883856","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4598"},{"text":"val relationName = \"IN\"\n\nval filesPattern = s\"2018/$sourceDate*.export.CSV.zip\"\nval inputUrl = s\"s3a://$BUCKET/$filesPattern\"\n\nval relationFileName = s\"${relationName}_EC\"\nval sparkDstFolder = s\"$outputPrefix/relations/$relationFileName\"\nval dstFolder = s\"$outputFolder/relations/$relationFileName\"\nval outputUrl = s\"$outputFolder/relations/$relationFileName/$relationFileName.csv.gz\"\n\nval df = readFile(inputUrl).map(l => eventFromStr(l.split(delimiter))).toDF() \n  \n  // get interesting columns\ndf.select($\"GlobalEventId\".as(\"Event\"), $\"ActionGeo_CountryCode\".as(\"iso_code\")).  // write to s3\n  join(broadcast(countries_codes_df), Seq(\"iso_code\")).select($\"Event\".as(s\"$START_ID(Event)\"), $\"Country\".as(s\"$END_ID(Country)\"), lit(relationName).as(TYPE)).\n  distinct.coalesce(1).write.mode(\"overwrite\").option(\"delimiter\", \",\").option(\"header\", \"true\").option(\"codec\", \"org.apache.hadoop.io.compress.GzipCodec\").csv(sparkDstFolder)\n  \nval partFile = awsClient.listObjects(BUCKET,dstFolder).getObjectSummaries().asScala.map(_.getKey).filter(_.contains(\"part\")).head\nawsClient.copyObject(BUCKET, partFile, BUCKET, outputUrl)\nawsClient.setObjectAcl(BUCKET, outputUrl, CannedAccessControlList.PublicRead)\n  ","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"relationName: String = IN\nfilesPattern: String = 2018/2018*.export.CSV.zip\ninputUrl: String = s3a://gdelt-raw/2018/2018*.export.CSV.zip\nrelationFileName: String = IN_EC\nsparkDstFolder: String = s3a://gdelt-raw/neo4j/relations/IN_EC\ndstFolder: String = neo4j/relations/IN_EC\noutputUrl: String = neo4j/relations/IN_EC/IN_EC.csv.gz\ndf: org.apache.spark.sql.DataFrame = [GLOBALEVENTID: int, SQLDATE: int ... 59 more fields]\npartFile: String = neo4j/relations/IN_EC/part-00000-af125773-1de8-46e4-a7ac-dbebfbb74cbf-c000.csv.gz\nres26: com.amazonaws.services.s3.model.CopyObjectResult = com.amazonaws.services.s3.model.CopyObjectResult@621dafdf\n"}]},"apps":[],"jobName":"paragraph_1548333524106_-1721906826","id":"20190118-161207_791700079","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4599"},{"text":"","dateUpdated":"2019-01-24T12:38:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1548333524108_-1724215320","id":"20190118-160905_149191942","dateCreated":"2019-01-24T12:38:44+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4600"}],"name":"Create_nodes_emr","id":"2E3MT1WCQ","angularObjects":{"2E2FF8FTV:shared_process":[],"2E1N6NBJ3:shared_process":[],"2E236X4UW:shared_process":[],"2E29UANK6:shared_process":[],"2E3855KMP:shared_process":[],"2E1B4KM8V:shared_process":[],"2E2VR3QHJ:shared_process":[],"2E2HG6YK4:shared_process":[],"2DZFY5Z29:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}